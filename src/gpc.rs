#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

use crate::polygon::Polygon;
use crate::point::Point2D;
use anyhow::Result;
use num_traits::ToPrimitive;

// Include the bindings generated by bindgen
include!(concat!(env!("OUT_DIR"), "/gpc.rs"));

pub trait Clippable : Polygon {
    fn clip_polygon(&self, other: &Self) -> Result<Self> {
        unimplemented!()
    }

    fn to_gpc_polygon(&self) -> gpc_polygon {
        let num_contours = 1; // Assuming one contour for simplicity
        let hole = std::ptr::null_mut(); // If you know whether it's a hole, allocate appropriately

        // Create a gpc_vertex_list and allocate memory for the vertices
        let vertex_list = gpc_vertex_list {
            num_vertices: self.length() as ::std::os::raw::c_int,
            vertex: self.iter_vertices()
                .map(|vertex| gpc_vertex {
                    x: vertex.x().to_f64().unwrap(),
                    y: vertex.y().to_f64().unwrap(),
                })
                .collect::<Vec<_>>()
                .as_mut_ptr(),
        };

        // Allocate memory for the contour and assign the vertex list
        let contour = Box::into_raw(Box::new(vertex_list));

        gpc_polygon {
            num_contours,
            hole,
            contour,
        }
    }
}